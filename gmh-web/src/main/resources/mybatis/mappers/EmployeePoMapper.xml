<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zes.squad.gmh.mapper.EmployeeMapper">
	<resultMap id="BaseResultMap" type="com.zes.squad.gmh.entity.po.EmployeePo">
		<id column="id" jdbcType="BIGINT" property="id" />
		<result column="name" jdbcType="VARCHAR" property="name" />
		<result column="gender" jdbcType="TINYINT" property="gender" />
		<result column="mobile" jdbcType="VARCHAR" property="mobile" />
		<result column="entry_time" jdbcType="TIMESTAMP" property="entryTime" />
		<result column="is_working" jdbcType="TINYINT" property="working" />
		<result column="store_id" jdbcType="BIGINT" property="storeId" />
		<result column="remark" jdbcType="VARCHAR" property="remark" />
		<result column="created_time" jdbcType="TIMESTAMP" property="createdTime" />
		<result column="modified_time" jdbcType="TIMESTAMP" property="modifiedTime" />
	</resultMap>
	<sql id="Base_Column_List">
		`id`, `name`, `gender`, `mobile`, `entry_time`, `is_working`, `store_id`, `remark`, `created_time`, `modified_time`
	</sql>
	<insert id="insert" parameterType="com.zes.squad.gmh.entity.po.EmployeePo">
		<selectKey keyProperty="id" resultType="long" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
		INSERT INTO employee
		(`name`, `gender`, `mobile`, `entry_time`,
		`is_working`, `store_id`, `remark`)
		VALUES
		(#{name, jdbcType=VARCHAR},
		#{gender, jdbcType=TINYINT},
		#{mobile, jdbcType=VARCHAR},
		#{entryTime, jdbcType=TIMESTAMP},
		#{working, jdbcType=TINYINT},
		#{storeId, jdbcType=BIGINT},
		#{remark, jdbcType=VARCHAR})
	</insert>
	<update id="updateWorkingById" parameterType="long">
		UPDATE employee SET `is_working` = 0 WHERE `id` = #{id, jdbcType=BIGINT}
	</update>
	<update id="batchUpdateWorkingByIds" parameterType="list">
		UPDATE employee SET `is_working` = 0 WHERE `id` IN
		<foreach collection="list" item="id" separator="," open="("
			close=")">
			#{id, jdbcType=BIGINT}
		</foreach>
	</update>
	<update id="updateSelective" parameterType="com.zes.squad.gmh.entity.po.EmployeePo">
		UPDATE employee
		<set>
			<if test="name != null and name != ''">
				`name` = #{name, jdbcType=VARCHAR},
			</if>
			<if test="gender != null">
				`gender` = #{gender, jdbcType=TINYINT},
			</if>
			<if test="mobile != null and mobile != ''">
				`mobile` = #{mobile, jdbcType=VARCHAR},
			</if>
			<if test="entryTime != null">
				`entry_time` = #{entryTime, jdbcType=TIMESTAMP},
			</if>
			<if test="working != null">
				`is_working` = #{working, jdbcType=TINYINT},
			</if>
			`remark` = #{remark, jdbcType=VARCHAR}
		</set>
		WHERE `id` = #{id, jdbcType=BIGINT}
	</update>
	<select id="selectById" parameterType="long" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM
		employee
		WHERE `id` = #{id:BIGINT}
	</select>
	<select id="selectByMobile" parameterType="string" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM
		employee
		WHERE `mobile` = #{mobile:VARCHAR} AND `is_working` = 1
		LIMIT 1
	</select>
	<select id="selectEmployeeIdsByCondition"
		parameterType="com.zes.squad.gmh.entity.condition.EmployeeWorkQueryCondition"
		resultType="long">
		SELECT
		DISTINCT ew.`employee_id`
		FROM 
		employee e
		LEFT JOIN
		employee_work ew
		ON
		e.`id` = ew.`employee_id`
		<where>
			<if test="storeId != null">
				e.`store_id` = #{storeId, jdbcType=BIGINT}
			</if>
			<if test="startEntryTime != null and endEntryTime == null">
				AND e.`entry_time` <![CDATA[>]]> #{startEntryTime, jdbcType=TIMESTAMP}
			</if>
			<if test="startEntryTime == null and endEntryTime != null">
				AND e.`entry_time` <![CDATA[<]]> #{endEntryTime, jdbcType=TIMESTAMP}
			</if>
			<if test="startEntryTime != null and endEntryTime != null">
				AND (e.`entry_time` BETWEEN #{startEntryTime, jdbcType=TIMESTAMP} AND #{endEntryTime, jdbcType=TIMESTAMP})
			</if>
			<if test="working != null">
				AND e.`is_working` = #{working, jdbcType=TINYINT}
			</if>
			<if test="workType != null">
				AND ew.`work_type` = #{workType, jdbcType=INTEGER}
			</if>
			<if test="search != null and search != ''">
				<bind name="condition" value="'%' + search + '%'" />
				AND 
				(e.`name` LIKE #{condition, jdbcType=VARCHAR}
				OR
				e.`mobile` LIKE #{condition, jdbcType=VARCHAR}
				OR
				e.`remark` LIKE #{condition, jdbcType=VARCHAR})
			</if>
		</where>
	</select>
	<select id="selectByWorkType" resultMap="BaseResultMap">
		SELECT
		DISTINCT e.`id`, e.`name`
		FROM 
		employee e
		LEFT JOIN
		employee_work ew
		ON
		e.`id` = ew.`employee_id`
		WHERE
		`is_working` = 1
		AND
		`store_id` = #{storeId:BIGINT}
		<if test="workType != null">
			AND ew.`work_type` = #{workType:INTEGER}
		</if>
	</select>
	<select id="selectByWorkTypes" resultMap="BaseResultMap">
		SELECT
		DISTINCT e.`id`, e.`name`
		FROM 
		employee e
		LEFT JOIN
		employee_work ew
		ON
		e.`id` = ew.`employee_id`
		WHERE
		`is_working` = 1
		AND
		e.`store_id` = #{storeId:BIGINT}
		<if test="workTypes != null and workTypes.size() != 0">
			AND ew.`work_type` IN
			<foreach collection="workTypes" item="workType" separator="," open="(" close=")">
				#{workType:INTEGER}
			</foreach>
		</if>
	</select>
	<select id="getOfficialOperatorId" parameterType="long" resultType="long">
		select id from employee
		where
		id in(
		select employee_id from
		employee_work
		where
		work_type in(1,2,3)
		)
		and 
		store_id=#{storeId,jdbcType=BIGINT}
	</select>
	<select id="getInternOperatorId" parameterType="long" resultType="long">
		select id from employee
		where
		id in(
		select employee_id from
		employee_work
		where
		work_type in=4
		)
		and 
		store_id=#{storeId,jdbcType=BIGINT}
	</select>
	
</mapper>