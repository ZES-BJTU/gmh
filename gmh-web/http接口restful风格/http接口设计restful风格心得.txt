注:本篇文章仅仅是心得和建议,不强制作为规范,有问题可以指出.

前提:
网络上的数据、图片、网页、文件等均看做一个资源,根据http协议访问的URI仅仅是资源的一种表示.

RESTFUL风格:
1.新建资源
可以使用POST和PUT请求,但是二者之间存在区别:POST请求不具备幂等性而PUT请求具备幂等性;
举例说明:
以/users/1表示用户id为1的资源,新建一个用户可以有两种URI表示方式即/users和/users/1;
这种情况下对于PUT请求应使用/users/1作为URI,而对于POST请求应使用/users作为URI;
因为PUT请求的幂等性,所以形如/users/1的URI不管调用多少次,只要输入的数据不变,在系统中只会生成一个id为1的资源;
而POST请求不具备幂等性,所以形如/users的URI每调用1次就会生成一个新的id对应的资源;
一般而言,在新建一个资源的过程中,我们无法预计id的具体值,所以新建资源一般使用POST请求.
返回及状态码:
资源新建成功后应返回整个新建的资源对象,且HTTP的状态码不再使用200而使用201表示新建成功.

2.删除资源
删除数据使用DELETE请求:
删除单个资源使用形如/users/1的URI;
删除多个资源使用形如/users的URI,
对于此参数不需要构造单独的对象:
前端:直接对参数json序列化处理,处理完参数后参数在DELETE请求体中应该呈现[1,2,3...]的形式而不是{"ids":[1,2,3...]}
后端:使用(@RequestBody List<Long> ids)的形式接收参数,不需要定义一个实体类Params且实体类中仅仅一个List<Long> ids成员变量,
然后使用(@RequestBody Params params)的形式接收参数,这种做法反而增加了复杂度.
返回及状态码:
资源删除成功后HTTP的状态码不再使用200而使用204表示删除成功,无对应资源.

3.修改资源
可以使用POST请求和PATCH请求:
当需要更新整个资源的时候使用POST请求,前端需要传入整个资源对象数据;
当需要更新部分资源的时候使用PATCH请求,前端仅仅需要传入需要更新的数据;
URI均形如/users/1表示对id为1的用户资源进行更改.
返回及状态码:
资源修改成功后应返回整个修改后的资源对象,HTTP的状态码使用200表示修改成功.

4.获取资源
使用GET请求
查询单个资源使用形如/users/1的URI表示查询id为1的用户资源;
查询多个资源使用形如/users?search=***&pageNum=1&pageSize=10的形式;
虽然某些语言在GET请求上支持GET请求体携带参数,但是不推荐此做法,GET请求仅以一个URI表示路径和参数;
除非在URI长度超出限制或者参数结构过于复杂等极端情况下,否则不推荐使用POST请求代替GET请求查询,
原因如下:
①获取资源使用GET请求更符合RESTFUL风格要求;
②获取同样的资源GET请求速度快于POST请求(POST在获取资源使用两次请求而GET请求仅使用一次请求)
返回及状态码:
资源获取成功后HTTP的状态码使用200表示获取成功.

URI设计建议:
1.对资源的操作不应该通过URI区别,而应该通过请求方式做出区别.
举例说明:
PUT请求		/users/1 表示新建一个id为1的用户
DELETE请求	/users/1 表示删除一个id为1的用户
POST请求		/users/1 表示全量修改一个id为1的用户
PATCH请求		/users/1 表示部分修改一个id为1的用户
GET请求		/users/1 表示查询一个id为1的用户

2.URI路径设计不应该使用动词,使用名词表示资源,使用不同请求方式对应对资源的操作.

3.URI路径设计根据语义使用复数,如从众多用户中获取id为1的用户应使用形如/users/1的URI而不是/user/1.

4.URI路径设计根据语义使用层级关系,如从众多用户的联系方式手机号可能有多个,获取用户id为1的且手机号id为1的手机资源使用形如/users/1/mobiles/1的URI

参考:
->前端:
1.常见的请求数据格式一般分为以下几种:
①application/x-www-form-urlencoded
GET请求默认的格式,此种格式会对请求进行URI编码,参数不管在GET请求的URI中还是在POST等请求的请求体中,参数以键值对的形式存在;
后端可以直接从request请求对象中以request.getParameter("**")方式获取,在spring的项目中可以直接定义参数名对应的变量获对象获取.

②multipart/form-data
常使用于表单文件上传,也可以传输文本参数,参数存在于请求体中,请求会生成一个前缀、随机数分隔符和换行符,请求中的每一个参数以参数描述信息如
参数名、参数类型、长度等描述信息存在以及参数具体信息如文本参数对应的值或者上传文件对应的字节数组字符串表示或者其他类型参数信息,参数和参数之间以
分隔符前缀+随机数分隔符+换行符分隔开,每个参数之间留一个空行且只能有一个空行(如果没记错)且参数部分以一个分隔符前缀+随机数分隔符+换行符的组合结束;
后端获取参数需要手动解析或者使用spring等框架自带的参数获取方式,区别于上一中参数获取方式.

③application/json
参数json序列化后存在于请求体中,以标准json格式存在,后端获取需要手动解析或者使用spring自带的@RequestBody注解转化.

->后端:
1.形如/users/1中参数1的获取使用spring的@PathVariable注解,例如(@PathVariable("id") Long id);
2.请求的返回数据如果需要转化为json可以在具体方法上使用@ResponseBody或者类上面使用@RestController或者@RestControllerAdvice注解;
3.请求的返回码如果不是200可以在方法上使用@ResponseStatus注解,内含一个常量参数.